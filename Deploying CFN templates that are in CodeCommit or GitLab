
Skip to end of metadata
Created by Harryman, Rob, last modified on Jun 21, 2018 Go to start of metadata
GitLab:
insert steps here

CodeCommit:
Assumptions: You have access to a Linux system with the following installed: pip3, boto, awscli, git, stackility, upload your public key to the "SSH keys for AWS CodeCommit" in IAM and that your key id for dsi-utility is in your .ssh/config file

Since you can not search CodeCommit directly, your best course of action is to clone the "CloudEngineering" repo (its over 100Mb downloaded):
git clone ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/CloudEngineering
or Open your systems File Manager
NOTE on path:
Core AWS Code= buildout, nacls, etc..
- Core
Projects= devops and team associates AWS code
- DevOps
- Teams
Other= code that doesn't fit into specific project or devops code sets
Change working directory to the newly downloaded directory:
cd CloudEngineering/
Checkout a branch of the CloudEngineering:
git checkout -b nameofmybranch
Change working directory to home directory
Find the related repo using grep:
grep -Ril "word or words of the object you need" CloudEngineering/
Change to the CloudEngineering subdirectory of the object you need to modify
example: cd CloudEngineering/projects/devops/agisoft_server/
Edit the template file (yaml or json) for major changes. If you modify the YAML file then please flip the file so that the JSON file will also work and vice versa. You may need to install cfn-flip
If you modify the yaml, then run the following command:
cfn-flip -j -l template.yaml > template.json

If you modify the json, then run the following command:
cfn-flip -y -l template.json > template.yaml

In some case you may need to modify the ini files that are located in the config/ directory of the project/repo. Each ini file relates to an aws account. For example, dl.ini or ga.ini is for datalake, ut.ini is for utility, pd.ini is for production, sb.ini is for sandbox, etc.
I usually copy my repo to CodeCommit just in case my laptop crashes:
git add .  (add the files to the branch)
git commit  (you will need to type in a description in the nano editor, then press Enter key, then press CTRL + o, then press CTRL + x to save the description)
git push origin nameofmybranch
Push your changes out (make sure you are at the directory above config or modify your command). You will need to install stackility using the following command: sudo pip install stackility:
For example, to push a change to sandbox:  stackility upsert -i config/sb_config.ini

If your changes were successful you should get output describing the changes. If your changes were unsuccessful, then you will get a "start of stack create/update did not go well." type message.


To resolve merge conflicts:
1. git checkout master (switch to local master)
2. git pull (refresh local master)
3. git checkout nameofmybranch (switch to local branch)
4. git merge master (merge local branch with local master, may have to resolve any conflicts)
5. git push origin nameofmybranch (push changes to remote branch)



Misc Git commands:

git add . (add all current changes to the next commit)
git commit (commit changes to head branch)
git branch (List all the branches in your
git diff (changes to tracked files)
git status (changed files in your working directory)
git configure (configure the author name and email address) ***only needed at first usage/setup
git pull (Fetch and merge changes on the remote server to your working directory)
git fetch (pulls down all information in the remote repo/branch that is in the repo that is not in your local repo)

